# Build Custom Padavan 4.4 Firmware
name: Custom Padavan Build

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select router device"
        required: true
        type: choice
        options: [RM2100]
        default: RM2100
      toolchain:
        description: "Select compilation toolchain"
        required: true
        type: choice
        options: [mipsel-linux-uclibc, mipsel-linux-musl]
        default: mipsel-linux-uclibc
      cpufreq:
        type: boolean
        default: true
      mt7621_oc:
        type: choice
        options: [ '0x312', '0x362', '0x372', '0x3B2' ]
        default: '0x312'
      release:
        type: boolean
        default: true

env:
  FIRMWARE_AUTHOR: CustomBuild
  LINUX_DIR: linux-4.4.x
  WORK_DIR: padavan  # 新增专用目录，避免冲突
  CONFIGFILE: ${{ env.WORK_DIR }}/trunk/configs/templates/RM2100.config

jobs:
  build:
    name: Build RM2100 Firmware
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repo (if needed)
        uses: actions/checkout@v4
        with:
          path: current
          fetch-depth: 1

      - name: Clone Padavan source (解决目录冲突)
        run: |
          # 关键修复：使用专用目录克隆，避免与现有文件冲突
          if [ -d "${{ env.WORK_DIR }}" ]; then
            echo "清理已有目录"
            rm -rf ${{ env.WORK_DIR }}
          fi
          # 完整克隆源码（含子模块）
          git clone --recursive https://github.com/TurBoTse/padavan.git ${{ env.WORK_DIR }}
          # 验证目录完整性
          if [ ! -d "${{ env.WORK_DIR }}/${{ env.LINUX_DIR }}" ]; then
            echo "::error::内核目录缺失"
            exit 1
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bison flex gperf help2man libtool-bin texinfo python3-docutils \
            autopoint gettext ccache autoconf automake liblzma-dev libltdl-dev \
            liblzo2-dev jq libusb-1.0-0-dev bc libelf-dev binutils-dev zlib1g-dev

      - name: Cache toolchain
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ inputs.toolchain }}-kernel

      - name: Validate toolchain
        run: |
          if ! command -v ${{ inputs.toolchain }}-gcc &> /dev/null; then
            echo "安装工具链"
            wget https://github.com/TurBoTse/padavan/releases/download/toolchain/${{ inputs.toolchain }}.tar.xz -O toolchain.tar.xz
            mkdir -p toolchain
            tar -xf toolchain.tar.xz -C toolchain
            export PATH=$PWD/toolchain/bin:$PATH
          fi
          ${{ inputs.toolchain }}-gcc --version || { echo "::error::工具链无效"; exit 1; }

      - name: Export configuration
        run: |
          echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +%Y%m%d)" >> $GITHUB_ENV
          # 导入默认自定义配置
          echo 'LANIP=192.168.2.1' >> $GITHUB_ENV
          echo 'SIGNACCOUNT=root' >> $GITHUB_ENV
          echo 'SIGNPASSWORD=root' >> $GITHUB_ENV
          echo 'WIFI2GSSID=Redmi_888' >> $GITHUB_ENV
          echo 'WIFI2GPSK=' >> $GITHUB_ENV
          echo 'WIFI5GSSID=Redmi_888' >> $GITHUB_ENV
          echo 'WIFI5GPSK=' >> $GITHUB_ENV
          echo 'WIFI2G_GUEST_SSID=Redmi_888_pub_2.4G' >> $GITHUB_ENV
          echo 'WIFI5G_GUEST_SSID=Redmi_888_pub_5G' >> $GITHUB_ENV

      - name: Apply configurations
        run: |
          cd ${{ env.WORK_DIR }}/trunk
          # 修改系统配置
          sed -i "s/SYS_USER_ROOT		\"admin\"/SYS_USER_ROOT		\"$SIGNACCOUNT\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_ROOT_PASSWORD	\"admin\"/DEF_ROOT_PASSWORD	\"$SIGNPASSWORD\"/g" user/shared/src/defaults.h
          sed -i "s/192.168.2/$LANIP/g" user/shared/src/defaults.h
          # 修改无线配置
          sed -i "s/DEF_WLAN_2G_SSID	.*/DEF_WLAN_2G_SSID	\"$WIFI2GSSID\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_WLAN_5G_SSID	.*/DEF_WLAN_5G_SSID	\"$WIFI5GSSID\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_WLAN_2G_GSSID	.*/DEF_WLAN_2G_GSSID	\"$WIFI2G_GUEST_SSID\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_WLAN_5G_GSSID	.*/DEF_WLAN_5G_GSSID	\"$WIFI5G_GUEST_SSID\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_WLAN_2G_PSK		\".*\"/DEF_WLAN_2G_PSK		\"$WIFI2GPSK\"/g" user/shared/src/defaults.h
          sed -i "s/DEF_WLAN_5G_PSK		\".*\"/DEF_WLAN_5G_PSK		\"$WIFI5GPSK\"/g" user/shared/src/defaults.h
          # 内核配置修复
          echo "CONFIG_FIRMWARE_INCLUDE_MSD_LITE=n" >> ${{ env.CONFIGFILE }}
          echo "CONFIG_LINUXDIR=${{ env.LINUX_DIR }}" >> ${{ env.CONFIGFILE }}
          # 超频配置
          if [ "${{ inputs.cpufreq }}" = "true" ]; then
            echo "CONFIG_FIRMWARE_INCLUDE_OC=y" >> ${{ env.CONFIGFILE }}
            echo "CONFIG_FIRMWARE_MT7621_OC=${{ inputs.mt7621_oc }}" >> ${{ env.CONFIGFILE }}
          fi

      - name: Build kernel
        run: |
          cd ${{ env.WORK_DIR }}/trunk
          make linux V=1 2>&1 | tee kernel.log
          if [ ! -f "${{ env.LINUX_DIR }}/vmlinux" ]; then
            echo "::error::内核编译失败"
            exit 1
          fi

      - name: Build firmware
        run: |
          cd ${{ env.WORK_DIR }}/trunk
          make ${{ inputs.target }} TOOLCHAIN=${{ inputs.toolchain }} V=1 2>&1 | tee build.log
          mkdir -p output
          base="RM2100-${{ env.BUILD_DATE }}-${{ inputs.toolchain }}"
          [ "${{ inputs.cpufreq }}" = "true" ] && base="${base}-oc-${{ inputs.mt7621_oc }}"
          mv images/*.trx output/${base}.trx

      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.WORK_DIR }}/trunk/kernel.log
            ${{ env.WORK_DIR }}/trunk/build.log

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: rm2100-firmware
          path: ${{ env.WORK_DIR }}/trunk/output/*.trx

      - name: Create release
        if: ${{ inputs.release && success() }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.BUILD_DATE }}
          files: ${{ env.WORK_DIR }}/trunk/output/*.trx
