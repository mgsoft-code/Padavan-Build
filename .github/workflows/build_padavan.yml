# Build TurBoTse's Padavan 4.4 Kernel
name: Custom Build
on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select router device"
        required: true
        type: choice
        options:
          - 360-T6M
          - 360-T6M-PB
          - B70
          - BELL-A040WQ
          - C-Life-XG1
          - CR660x
          - DIR-878
          - DIR-882
          - EA7500
          - G-AX1800
          - G-AX1800-B
          - GHL
          - HAR-20S2U1
          - JCG-836PRO
          - JCG-AC860M
          - JCG-Q10Pro
          - JCG-Q10Pro-PB
          - JCG-Q11Pro
          - JCG-Q20
          - JCG-Q20-PB
          - JCG-Y2
          - JDCLOUD-RE-CP-02
          - JDCLOUD-RE-SP-01B
          - K2P
          - K2P-NANO
          - K2P-USB
          - KOMI-A8
          - MI-4
          - MI-R3G
          - MI-R3P-PB
          - MI-R3P-SPI
          - MI-R3P
          - MI-R4A
          - MR2600
          - MSG1500
          - MSG1500-Z
          - NETGEAR-BZV
          - NETGEAR-R6800
          - NETGEAR-R7450
          - NEWIFI
          - NEWIFI3
          - QM-B1
          - R2100
          - RM2100
          - RT-AC85P
          - SIM-AX1800T
          - TX1801
          - WDR8620
          - WRL18M4GD
          - WE410443-TC
          - WIA3300-10
          - WR1200JS
          - XY-C1
          - ZTE-E8820S
          - ZTE-E8820V2
          - ZTT-RX6000
        default: RM2100
      toolchain:
        description: "Select compilation toolchain"
        required: true
        type: choice
        options:
          - mipsel-linux-musl
          - mipsel-linux-uclibc
        default: mipsel-linux-uclibc
      cpufreq:
        description: "Enable CPU Overclocking"
        type: boolean
        default: true
      mt7621_oc:
        description: "1000Mhz=0x312 1100Mhz=0x362 1120Mhz=0x372 1200Mhz=0x3B2"
        type: choice
        options: [ '0x312', '0x362', '0x372', '0x3B2' ]
        default: '0x312'
      plugins:
        description: 'Plugin JSON, e.g. {"ss":"y","xray":"n"}'
        required: true
        type: string
        default: '{"shadowsocks":"n","v2ray":"n","xray":"n","trojan":"n","ssobfs":"n","smartdns":"n","vlmcsd":"n","ttyd":"y","iperf3":"y","tcpdump":"y","mtr":"y","dropbear":"y","https":"y","aliddns":"y","qos":"y","ipset":"y","sfe":"y"}'
      customization:
        description: 'Customization JSON'
        required: true
        type: string
        default: '{"lanip":"192.168.2.1","signaccount":"root","signpassword":"root","wifi2gssid":"Redmi_888","wifi2gpsk":"","wifi5gssid":"Redmi_888","wifi5gpsk":"","wifi2g_guest_ssid":"Redmi_888_pub_2.4G","wifi5g_guest_ssid":"Redmi_888_pub_5G"}'
      nanoversion:
        description: "Build Nano Version"
        type: boolean
        default: false
      release:
        description: "Upload to GitHub Release"
        type: boolean
        default: true
      oldreleases:
        description: "Delete Old Releases"
        type: boolean
        default: true
      oldworkflow:
        description: "Delete Old Workflows"
        type: boolean
        default: true
env:
  FIRMWARE_AUTHOR: TurBoTse
  TOOLCHAIN: ${{ inputs.toolchain }}
  TOOLCHAIN_URL: https://github.com/TurBoTse/padavan/releases/download/toolchain/${{ inputs.toolchain }}.tar.xz
  CONFIGFILE: trunk/configs/templates/${{ inputs.target }}.config
  LINUX_DIR: linux-4.4.x
jobs:
  build:
    name: Build ${{ inputs.target }}-${{ inputs.toolchain }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@main
        with:
          path: current
          fetch-depth: 1
      - uses: actions/checkout@main
        with:
          repository: TurBoTse/padavan
          ref: main
          fetch-depth: 1
      - uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ inputs.target }}-${{ inputs.toolchain }}
      - uses: actions/setup-go@main
        with:
          go-version: '1.24.x'
          check-latest: true
          cache: false
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bison flex gperf help2man libtool-bin texinfo python3-docutils autopoint gettext ccache \
            autoconf automake liblzma-dev libltdl-dev liblzo2-dev jq
          echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +%Y%m%d)" >> $GITHUB_ENV
      - name: Validate Input JSON
        run: |
          jq empty <<< '${{ inputs.plugins }}' || { echo "❌ Invalid plugins JSON"; exit 1; }
          jq empty <<< '${{ inputs.customization }}' || { echo "❌ Invalid customization JSON"; exit 1; }
      - name: Export Customization & Plugin Flags
        run: |
          export_json() {
            local JSON=$1
            local PREFIX=$2
            echo "$JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r k v; do
              echo "${PREFIX}${k^^}=$v" >> $GITHUB_ENV
            done
          }
          export_json '${{ inputs.customization }}' ""
          if [ "${{ inputs.nanoversion }}" = "true" ]; then
            echo "⚠️ Nano version — all plugins disabled."
            echo '${{ inputs.plugins }}' | jq 'with_entries(.value="n")' > plugins_fixed.json
          else
            echo '${{ inputs.plugins }}' > plugins_fixed.json
          fi
          export_json "$(cat plugins_fixed.json)" "PLUGIN_"
      - name: Apply Configurations
        run: |
          # 应用基础配置（用户名、密码、IP、WiFi）
          chmod +x trunk/custom/scripts/*.sh || true
          bash trunk/custom/scripts/setip.sh "$LANIP" trunk/user/shared/src/defaults.h trunk/user/www/dict/CN.dict
          bash trunk/custom/scripts/setaccount.sh "$SIGNACCOUNT" "$SIGNPASSWORD" trunk/user/shared/src/defaults.h
          bash trunk/custom/scripts/setwifi.sh "$WIFI2GSSID" "$WIFI2GPSK" "$WIFI5GSSID" "$WIFI5GPSK" trunk/user/shared/src/defaults.h
          
          # 配置访客WiFi名称（同步1.txt）
          sed -i 's/DEF_WLAN_2G_GSSID	".*"/DEF_WLAN_2G_GSSID	"'$WIFI2G_GUEST_SSID'"/g' trunk/user/shared/src/defaults.h
          sed -i 's/DEF_WLAN_5G_GSSID	".*"/DEF_WLAN_5G_GSSID	"'$WIFI5G_GUEST_SSID'"/g' trunk/user/shared/src/defaults.h
          
          # 应用功能开关（同步2.txt）
          echo "CONFIG_VENDOR=Ralink" >> "$CONFIGFILE"
          echo "CONFIG_PRODUCT=MT7621" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_PRODUCT_ID=\"RM2100\"" >> "$CONFIGFILE"
          echo "CONFIG_LINUXDIR=$LINUX_DIR" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_ENABLE_IPV6=y" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_ENABLE_USB=n" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_INCLUDE_SFE=$PLUGIN_SFE" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_INCLUDE_QOS=$PLUGIN_QOS" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_INCLUDE_IPSET=$PLUGIN_IPSET" >> "$CONFIGFILE"
          
          # 禁用未启用功能
          echo "CONFIG_FIRMWARE_INCLUDE_TRANSMISSION=n" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_INCLUDE_ARIA=n" >> "$CONFIGFILE"
          echo "CONFIG_FIRMWARE_INCLUDE_MINIDLNA=n" >> "$CONFIGFILE"
          
          # 应用插件配置
          for key in $(env | grep '^PLUGIN_' | cut -d= -f1); do
            echo "CONFIG_FIRMWARE_INCLUDE_${key#PLUGIN_}=${!key}" >> "$CONFIGFILE"
          done
          
          # CPU超频配置
          if [ "${{ inputs.cpufreq }}" = "true" ]; then
            echo "CONFIG_FIRMWARE_INCLUDE_OC=y" >> "$CONFIGFILE"
            echo "CONFIG_FIRMWARE_MT7621_OC=${{ inputs.mt7621_oc }}" >> "$CONFIGFILE"
          fi
          
          # 修复版本号文件路径（关键修改：指向trunk目录下的versions.inc）
          sed -i "s/FIRMWARE_BUILDS_REV=.*/FIRMWARE_BUILDS_REV=$BUILD_DATE/g" trunk/versions.inc
          
          # 调试：确认文件是否存在
          if [ ! -f "trunk/versions.inc" ]; then
            echo "::warning::versions.inc仍未找到，尝试搜索文件位置"
            find . -name "versions.inc"  # 输出实际路径用于进一步调试
          fi
      - name: Apply Nano Optimization
        if: ${{ inputs.nanoversion }}
        run: |
          for fs in ANTFS FAT EXFAT EXT2 EXT3 EXT4 XFS FUSE SWAP; do
            sed -i "s/CONFIG_FIRMWARE_ENABLE_${fs}=y/CONFIG_FIRMWARE_ENABLE_${fs}=n/" "$CONFIGFILE"
          done
          modules=(UVC HID SERIAL AUDIO XFRM IMQ NFSD NFSC CIFS NTFS_3G LPRD U2EC HDPARM PARTED 
            SMBD WINS SMBD_SYSLOG FTPD RPL2TP EAP_PEAP SFTP OPENSSH OPENVPN SSWAN 
            OPENSSL_EC XUPNPD FIREFLY FFMPEG_NEW TRANSMISSION TRANSMISSION_WEB_CONTROL ARIA 
            ARIA_WEB_CONTROL SCUTCLIENT GDUT_DRCOM DOGCOM MINIEAP NJIT_CLIENT SOFTETHERVPN_SERVER SOFTETHERVPN_CLIENT 
            SOFTETHERVPN_CMD VLMCSD LRZSZ DUMP1090 RTL_SDR SOCAT SRELAY MENTOHUST 
            FRPC FRPS REDSOCKS SINGBOX NAIVEPROXY ADBYBY DNSFORWARDER ADGUARDHOME 
            ZEROTIER DDNSTO ALDRIVER SQM )
          for m in "${modules[@]}"; do
            sed -i "s/CONFIG_FIRMWARE_INCLUDE_${m}=y/CONFIG_FIRMWARE_INCLUDE_${m}=n/" "$CONFIGFILE"
          done
      - name: Build Firmware
        run: |
          make ${{ inputs.target }} TOOLCHAIN=${{ inputs.toolchain }}
          mkdir -p trunk/output
          base="${FIRMWARE_AUTHOR}-${{ inputs.target }}-4.4-${{ inputs.toolchain }}"
          [ "${{ inputs.nanoversion }}" = "true" ] && base="${base}-nano"
          [ "${{ inputs.cpufreq }}" = "true" ] && base="${base}-cpufreq-${{ inputs.mt7621_oc }}"
          base="${base}-${BUILD_DATE}"
          i=1
          for f in trunk/images/*.trx; do
            suffix=""
            [ $i -gt 1 ] && suffix="-$i"
            mv "$f" "trunk/output/${base}${suffix}.trx"
            i=$((i+1))
          done
      - uses: actions/upload-artifact@main
        with:
          name: ${{ inputs.target }}-${{ inputs.toolchain }}-${{ env.BUILD_DATE }}
          path: trunk/output/*.trx
      - uses: softprops/action-gh-release@master
        if: ${{ inputs.release }}
        with:
          tag_name: ${{ env.BUILD_DATE }}
          name: ${{ env.BUILD_DATE }}
          body: |
            Build Summary:
            - Date: ${{ env.BUILD_DATE }}
            - Target: ${{ inputs.target }} (RM2100)
            - Toolchain: ${{ inputs.toolchain }}
            - Kernel: ${{ env.LINUX_DIR }}
            - Nano: ${{ inputs.nanoversion }}
            - CPU OC: ${{ inputs.cpufreq }} (${{ inputs.mt7621_oc }})
            - Plugins: ${{ inputs.plugins }}
            - Custom: ${{ inputs.customization }}
          files: trunk/output/*.trx
      - uses: dev-drprasad/delete-older-releases@master
        if: ${{ inputs.oldreleases }}
        with:
          keep_latest: 1
          keep_min_download_counts: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: Mattraks/delete-workflow-runs@main
        if: ${{ inputs.oldworkflow }}
        with:
          retain_days: 0
          keep_minimum_runs: 1
