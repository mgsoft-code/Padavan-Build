# Build Custom Padavan 4.4 Firmware
name: Custom Padavan Build

on:
  workflow_dispatch:
    inputs:
      target:
        description: "Select router device"
        required: true
        type: choice
        options:
          - RM2100  # 仅保留目标设备以简化配置
        default: RM2100
      toolchain:
        description: "Select compilation toolchain"
        required: true
        type: choice
        options:
          - mipsel-linux-uclibc
          - mipsel-linux-musl
        default: mipsel-linux-uclibc
      cpufreq:
        description: "Enable CPU Overclocking"
        type: boolean
        default: true
      mt7621_oc:
        description: "1000Mhz=0x312 1100Mhz=0x362 1120Mhz=0x372 1200Mhz=0x3B2"
        type: choice
        options: [ '0x312', '0x362', '0x372', '0x3B2' ]
        default: '0x312'
      plugins:
        description: 'Plugin JSON'
        required: true
        type: string
        default: '{"ttyd":"y","iperf3":"y","tcpdump":"y","mtr":"y","dropbear":"y","https":"y","aliddns":"y","qos":"y","ipset":"y","sfe":"y"}'
      customization:
        description: 'Customization JSON'
        required: true
        type: string
        default: '{"lanip":"192.168.2.1","signaccount":"root","signpassword":"root","wifi2gssid":"Redmi_888","wifi2gpsk":"","wifi5gssid":"Redmi_888","wifi5gpsk":"","wifi2g_guest_ssid":"Redmi_888_pub_2.4G","wifi5g_guest_ssid":"Redmi_888_pub_5G"}'
      release:
        description: "Upload to GitHub Release"
        type: boolean
        default: true

env:
  FIRMWARE_AUTHOR: CustomBuild
  LINUX_DIR: linux-4.4.x
  WORK_DIR: trunk
  CONFIGFILE: trunk/configs/templates/RM2100.config

jobs:
  build:
    name: Build RM2100 Firmware
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: current
          fetch-depth: 1

      - name: Clone Padavan source (full clone)
        run: |
          # 完整克隆源码，避免内核文件缺失
          git clone --recursive https://github.com/TurBoTse/padavan.git .
          # 验证内核目录完整性
          if [ ! -d "$LINUX_DIR" ]; then
            echo "::error::Kernel source directory $LINUX_DIR missing"
            exit 1
          fi
          # 检查内核配置文件
          if [ ! -f "$CONFIGFILE" ]; then
            echo "::error::Device config $CONFIGFILE missing"
            exit 1
          fi

      - name: Install kernel build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            bison flex gperf help2man libtool-bin texinfo python3-docutils \
            autopoint gettext ccache autoconf automake liblzma-dev libltdl-dev \
            liblzo2-dev jq libusb-1.0-0-dev \
            bc libelf-dev binutils-dev zlib1g-dev  # 新增内核编译必需依赖

      - name: Cache toolchain
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ inputs.toolchain }}-kernel

      - name: Validate toolchain
        run: |
          # 验证工具链是否正确安装
          if ! command -v ${{ inputs.toolchain }}-gcc &> /dev/null; then
            echo "::error::Toolchain ${{ inputs.toolchain }} not found"
            # 尝试重新下载工具链
            wget $TOOLCHAIN_URL -O toolchain.tar.xz
            mkdir -p toolchain
            tar -xf toolchain.tar.xz -C toolchain
            export PATH=$PWD/toolchain/bin:$PATH
            ${{ inputs.toolchain }}-gcc --version || { echo "::error::Failed to install toolchain"; exit 1; }
          fi

      - name: Export configuration
        run: |
          # 解析自定义配置
          export_json() {
            local JSON=$1
            local PREFIX=$2
            echo "$JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r k v; do
              echo "${PREFIX}${k^^}=$v" >> $GITHUB_ENV
            done
          }
          export_json '${{ inputs.customization }}' ""
          export_json '${{ inputs.plugins }}' "PLUGIN_"
          echo "BUILD_DATE=$(TZ='Asia/Shanghai' date +%Y%m%d)" >> $GITHUB_ENV

      - name: Fix kernel configuration
        run: |
          cd $WORK_DIR
          # 加载设备默认配置
          make defconfig
          # 修复可能导致内核编译失败的配置
          sed -i -e '/CONFIG_KALLSYMS/s/=y/=n/' \
                 -e '/CONFIG_DEBUG_INFO/s/=y/=n/' \
                 -e '/CONFIG_DEBUG_KERNEL/s/=y/=n/' \
                 .config
          # 确保内核版本与配置匹配
          echo "CONFIG_LINUX_VERSION=\"4.4.x\"" >> .config
          echo "CONFIG_LINUX_DIR=\"$LINUX_DIR\"" >> .config

      - name: Build kernel with verbose output
        run: |
          cd $WORK_DIR
          # 单独编译内核并保存详细日志
          make linux V=1 2>&1 | tee kernel_build.log
          # 检查内核编译结果
          if [ ! -f "$LINUX_DIR/vmlinux" ]; then
            echo "::error::Kernel image not generated"
            exit 1
          fi

      - name: Build remaining components
        run: |
          cd $WORK_DIR
          # 编译用户态组件和固件打包
          make V=1 2>&1 | tee full_build.log

      - name: Package firmware
        run: |
          cd $WORK_DIR
          mkdir -p output
          base="RM2100-4.4-${{ inputs.toolchain }}-${{ env.BUILD_DATE }}"
          [ "${{ inputs.cpufreq }}" = "true" ] && base="${base}-oc-${{ inputs.mt7621_oc }}"
          mv images/*.trx output/${base}.trx
          ls -la output/

      - name: Upload kernel logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: kernel-logs
          path: ${{ env.WORK_DIR }}/kernel_build.log

      - name: Upload full logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: full-build-logs
          path: ${{ env.WORK_DIR }}/full_build.log

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: rm2100-firmware-${{ env.BUILD_DATE }}
          path: ${{ env.WORK_DIR }}/output/*.trx

      - name: Create release
        if: ${{ inputs.release && success() }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.BUILD_DATE }}
          files: ${{ env.WORK_DIR }}/output/*.trx
